import React from 'react';

export default class Overview extends React.Component {
  render() {
    return (
      <main className="col-12 col-md-9 col-xl-8 py-md-3 pl-md-5 bd-content" role="main">
        <h1 className="bd-title" id="content">Overview</h1>
        <p className="bd-lead">Components and options for laying out your Bootstrap project, including wrapping containers, a powerful grid system, a flexible media object, and responsive utility classes.</p>
        <h2 id="containers"><span className="bd-content-title">Containers</span></h2>
        <p>Containers are the most basic layout element in Bootstrap and are <strong>required when using our default grid system</strong>. Choose from a responsive, fixed-width container (meaning its <code className="highlighter-rouge">max-width</code> changes at each breakpoint) or fluid-width (meaning it’s <code className="highlighter-rouge">100%</code> wide all the time).</p>
        <p>While containers <em>can</em> be nested, most layouts do not require a nested container.</p>
        <div className="bd-example">
          <div className="bd-example-container">
            <div className="bd-example-container-header" />
            <div className="bd-example-container-sidebar" />
            <div className="bd-example-container-body" />
          </div>
        </div>
        <div className="bd-clipboard"><button type="button" className="btn-clipboard" title data-original-title="Copy to clipboard">Copy</button></div><figure className="highlight"><pre><code className="language-html" data-lang="html"><span className="nt">&lt;div</span> <span className="na">class=</span><span className="s">"container"</span><span className="nt">&gt;</span>{"\n"}{"  "}<span className="c">&lt;!-- Content here --&gt;</span>{"\n"}<span className="nt">&lt;/div&gt;</span></code></pre></figure>
        <p>Use <code className="highlighter-rouge">.container-fluid</code> for a full width container, spanning the entire width of the viewport.</p>
        <div className="bd-example">
          <div className="bd-example-container bd-example-container-fluid">
            <div className="bd-example-container-header" />
            <div className="bd-example-container-sidebar" />
            <div className="bd-example-container-body" />
          </div>
        </div>
        <div className="bd-clipboard"><button type="button" className="btn-clipboard" title data-original-title="Copy to clipboard">Copy</button></div><figure className="highlight"><pre><code className="language-html" data-lang="html"><span className="nt">&lt;div</span> <span className="na">class=</span><span className="s">"container-fluid"</span><span className="nt">&gt;</span>{"\n"}{"  "}...{"\n"}<span className="nt">&lt;/div&gt;</span></code></pre></figure>
        <h2 id="responsive-breakpoints"><span className="bd-content-title">Responsive breakpoints</span></h2>
        <p>Since Bootstrap is developed to be mobile first, we use a handful of <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">media queries</a> to create sensible breakpoints for our layouts and interfaces. These breakpoints are mostly based on minimum viewport widths and allow us to scale up elements as the viewport changes.</p>
        <p>Bootstrap primarily uses the following media query ranges—or breakpoints—in our source Sass files for our layout, grid system, and components.</p>
        <div className="bd-clipboard"><button type="button" className="btn-clipboard" title data-original-title="Copy to clipboard">Copy</button></div><figure className="highlight"><pre><code className="language-scss" data-lang="scss"><span className="c1">// Extra small devices (portrait phones, less than 576px)</span>{"\n"}<span className="c1">// No media query for `xs` since this is the default in Bootstrap</span>{"\n"}{"\n"}<span className="c1">// Small devices (landscape phones, 576px and up)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">min-width</span><span className="o">:</span> <span className="m">576px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}{"\n"}<span className="c1">// Medium devices (tablets, 768px and up)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">min-width</span><span className="o">:</span> <span className="m">768px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}{"\n"}<span className="c1">// Large devices (desktops, 992px and up)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">min-width</span><span className="o">:</span> <span className="m">992px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}{"\n"}<span className="c1">// Extra large devices (large desktops, 1200px and up)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">min-width</span><span className="o">:</span> <span className="m">1200px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span></code></pre></figure>
        <p>Since we write our source CSS in Sass, all our media queries are available via Sass mixins:</p>
        <div className="bd-clipboard"><button type="button" className="btn-clipboard" title data-original-title="Copy to clipboard">Copy</button></div><figure className="highlight"><pre><code className="language-scss" data-lang="scss"><span className="c1">// No media query necessary for xs breakpoint as it's effectively `@media (min-width: 0) {"{"} ... {"}"}`</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-up</span><span className="p">(</span><span className="n">sm</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-up</span><span className="p">(</span><span className="n">md</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-up</span><span className="p">(</span><span className="n">lg</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-up</span><span className="p">(</span><span className="n">xl</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}{"\n"}<span className="c1">// Example: Hide starting at `min-width: 0`, and then show at the `sm` breakpoint</span>{"\n"}<span className="nc">.custom-class</span> <span className="p">{"{"}</span>{"\n"}{"  "}<span className="nl">display</span><span className="p">:</span> <span className="nb">none</span><span className="p">;</span>{"\n"}<span className="p">{"}"}</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-up</span><span className="p">(</span><span className="n">sm</span><span className="p">)</span> <span className="p">{"{"}</span>{"\n"}{"  "}<span className="nc">.custom-class</span> <span className="p">{"{"}</span>{"\n"}{"    "}<span className="nl">display</span><span className="p">:</span> <span className="nb">block</span><span className="p">;</span>{"\n"}{"  "}<span className="p">{"}"}</span>{"\n"}<span className="p">{"}"}</span></code></pre></figure>
        <p>We occasionally use media queries that go in the other direction (the given screen size <em>or smaller</em>):</p>
        <div className="bd-clipboard"><button type="button" className="btn-clipboard" title data-original-title="Copy to clipboard">Copy</button></div><figure className="highlight"><pre><code className="language-scss" data-lang="scss"><span className="c1">// Extra small devices (portrait phones, less than 576px)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">max-width</span><span className="o">:</span> <span className="m">575</span><span className="mi">.98px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}{"\n"}<span className="c1">// Small devices (landscape phones, less than 768px)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">max-width</span><span className="o">:</span> <span className="m">767</span><span className="mi">.98px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}{"\n"}<span className="c1">// Medium devices (tablets, less than 992px)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">max-width</span><span className="o">:</span> <span className="m">991</span><span className="mi">.98px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}{"\n"}<span className="c1">// Large devices (desktops, less than 1200px)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">max-width</span><span className="o">:</span> <span className="m">1199</span><span className="mi">.98px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}{"\n"}<span className="c1">// Extra large devices (large desktops)</span>{"\n"}<span className="c1">// No media query since the extra-large breakpoint has no upper bound on its width</span></code></pre></figure>
        <div className="bd-callout bd-callout-info">
          <p>Note that since browsers do not currently support <a href="https://www.w3.org/TR/mediaqueries-4/#range-context">range context queries</a>, we work around the limitations of <a href="https://www.w3.org/TR/mediaqueries-4/#mq-min-max"><code className="highlighter-rouge">min-</code> and <code className="highlighter-rouge">max-</code> prefixes</a> and viewports with fractional widths (which can occur under certain conditions on high-dpi devices, for instance) by using values with higher precision for these comparisons.</p>
        </div>
        <p>Once again, these media queries are also available via Sass mixins:</p>
        <div className="bd-clipboard"><button type="button" className="btn-clipboard" title data-original-title="Copy to clipboard">Copy</button></div><figure className="highlight"><pre><code className="language-scss" data-lang="scss"><span className="k">@include</span> <span className="nd">media-breakpoint-down</span><span className="p">(</span><span className="n">xs</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-down</span><span className="p">(</span><span className="n">sm</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-down</span><span className="p">(</span><span className="n">md</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-down</span><span className="p">(</span><span className="n">lg</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}<span className="c1">// No media query necessary for xl breakpoint as it has no upper bound on its width</span>{"\n"}{"\n"}<span className="c1">// Example: Style from medium breakpoint and down</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-down</span><span className="p">(</span><span className="n">md</span><span className="p">)</span> <span className="p">{"{"}</span>{"\n"}{"  "}<span className="nc">.custom-class</span> <span className="p">{"{"}</span>{"\n"}{"    "}<span className="nl">display</span><span className="p">:</span> <span className="nb">block</span><span className="p">;</span>{"\n"}{"  "}<span className="p">{"}"}</span>{"\n"}<span className="p">{"}"}</span></code></pre></figure>
        <p>There are also media queries and mixins for targeting a single segment of screen sizes using the minimum and maximum breakpoint widths.</p>
        <div className="bd-clipboard"><button type="button" className="btn-clipboard" title data-original-title="Copy to clipboard">Copy</button></div><figure className="highlight"><pre><code className="language-scss" data-lang="scss"><span className="c1">// Extra small devices (portrait phones, less than 576px)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">max-width</span><span className="o">:</span> <span className="m">575</span><span className="mi">.98px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}{"\n"}<span className="c1">// Small devices (landscape phones, 576px and up)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">min-width</span><span className="o">:</span> <span className="m">576px</span><span className="p">)</span> <span className="nf">and</span> <span className="p">(</span><span className="n">max-width</span><span className="o">:</span> <span className="m">767</span><span className="mi">.98px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}{"\n"}<span className="c1">// Medium devices (tablets, 768px and up)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">min-width</span><span className="o">:</span> <span className="m">768px</span><span className="p">)</span> <span className="nf">and</span> <span className="p">(</span><span className="n">max-width</span><span className="o">:</span> <span className="m">991</span><span className="mi">.98px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}{"\n"}<span className="c1">// Large devices (desktops, 992px and up)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">min-width</span><span className="o">:</span> <span className="m">992px</span><span className="p">)</span> <span className="nf">and</span> <span className="p">(</span><span className="n">max-width</span><span className="o">:</span> <span className="m">1199</span><span className="mi">.98px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}{"\n"}<span className="c1">// Extra large devices (large desktops, 1200px and up)</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">min-width</span><span className="o">:</span> <span className="m">1200px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span></code></pre></figure>
        <p>These media queries are also available via Sass mixins:</p>
        <div className="bd-clipboard"><button type="button" className="btn-clipboard" title data-original-title="Copy to clipboard">Copy</button></div><figure className="highlight"><pre><code className="language-scss" data-lang="scss"><span className="k">@include</span> <span className="nd">media-breakpoint-only</span><span className="p">(</span><span className="n">xs</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-only</span><span className="p">(</span><span className="n">sm</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-only</span><span className="p">(</span><span className="n">md</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-only</span><span className="p">(</span><span className="n">lg</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span>{"\n"}<span className="k">@include</span> <span className="nd">media-breakpoint-only</span><span className="p">(</span><span className="n">xl</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span></code></pre></figure>
        <p>Similarly, media queries may span multiple breakpoint widths:</p>
        <div className="bd-clipboard"><button type="button" className="btn-clipboard" title data-original-title="Copy to clipboard">Copy</button></div><figure className="highlight"><pre><code className="language-scss" data-lang="scss"><span className="c1">// Example</span>{"\n"}<span className="c1">// Apply styles starting from medium devices and up to extra large devices</span>{"\n"}<span className="k">@media</span> <span className="p">(</span><span className="n">min-width</span><span className="o">:</span> <span className="m">768px</span><span className="p">)</span> <span className="nf">and</span> <span className="p">(</span><span className="n">max-width</span><span className="o">:</span> <span className="m">1199</span><span className="mi">.98px</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span></code></pre></figure>
        <p>The Sass mixin for targeting the same screen size range would be:</p>
        <div className="bd-clipboard"><button type="button" className="btn-clipboard" title data-original-title="Copy to clipboard">Copy</button></div><figure className="highlight"><pre><code className="language-scss" data-lang="scss"><span className="k">@include</span> <span className="nd">media-breakpoint-between</span><span className="p">(</span><span className="n">md</span><span className="o">,</span> <span className="n">xl</span><span className="p">)</span> <span className="p">{"{"}</span> <span className="nc">...</span> <span className="p">{"}"}</span></code></pre></figure>
        <h2 id="z-index"><span className="bd-content-title">Z-index</span></h2>
        <p>Several Bootstrap components utilize <code className="highlighter-rouge">z-index</code>, the CSS property that helps control layout by providing a third axis to arrange content. We utilize a default z-index scale in Bootstrap that’s been designed to properly layer navigation, tooltips and popovers, modals, and more.</p>
        <p>These higher values start at an arbitrary number, high and specific enough to ideally avoid conflicts. We need a standard set of these across our layered components—tooltips, popovers, navbars, dropdowns, modals—so we can be reasonably consistent in the behaviors. There’s no reason we couldn’t have used <code className="highlighter-rouge">100</code>+ or <code className="highlighter-rouge">500</code>+.</p>
        <p>We don’t encourage customization of these individual values; should you change one, you likely need to change them all.</p>
        <div className="bd-clipboard"><button type="button" className="btn-clipboard" title data-original-title="Copy to clipboard">Copy</button></div><figure className="highlight"><pre><code className="language-scss" data-lang="scss"><span className="nv">$zindex-dropdown</span><span className="p">:</span>{"          "}<span className="m">1000</span> <span className="o">!</span><span className="nb">default</span><span className="p">;</span>{"\n"}<span className="nv">$zindex-sticky</span><span className="p">:</span>{"            "}<span className="m">1020</span> <span className="o">!</span><span className="nb">default</span><span className="p">;</span>{"\n"}<span className="nv">$zindex-fixed</span><span className="p">:</span>{"             "}<span className="m">1030</span> <span className="o">!</span><span className="nb">default</span><span className="p">;</span>{"\n"}<span className="nv">$zindex-modal-backdrop</span><span className="p">:</span>{"    "}<span className="m">1040</span> <span className="o">!</span><span className="nb">default</span><span className="p">;</span>{"\n"}<span className="nv">$zindex-modal</span><span className="p">:</span>{"             "}<span className="m">1050</span> <span className="o">!</span><span className="nb">default</span><span className="p">;</span>{"\n"}<span className="nv">$zindex-popover</span><span className="p">:</span>{"           "}<span className="m">1060</span> <span className="o">!</span><span className="nb">default</span><span className="p">;</span>{"\n"}<span className="nv">$zindex-tooltip</span><span className="p">:</span>{"           "}<span className="m">1070</span> <span className="o">!</span><span className="nb">default</span><span className="p">;</span></code></pre></figure>
        <p>To handle overlapping borders within components (e.g., buttons and inputs in input groups), we use low single digit <code className="highlighter-rouge">z-index</code> values of <code className="highlighter-rouge">1</code>, <code className="highlighter-rouge">2</code>, and <code className="highlighter-rouge">3</code> for default, hover, and active states. On hover/focus/active, we bring a particular element to the forefront with a higher <code className="highlighter-rouge">z-index</code> value to show their border over the sibling elements.</p>
      </main>
    );
  }
}